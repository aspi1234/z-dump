
[{"content":" A wall and a chalkboard: An Analogy to Understand Docker Images and Containers # Docker Image: The Permanent Wall # Think of a Docker Image as a finished, permanent wall. This wall is built from a stack of read-only layers, like transparent blocks fused together. Each block contains a specific piece of the application, like its operating system or other software dependencies. Because the wall is permanent and fused together, you cannot change any of its existing blocks.\nMany software providers, like Ubuntu, offer official \u0026ldquo;walls\u0026rdquo; that you can use as a starting point.\nContainer: The Chalkboard on the Wall # A Container is a live instance of an image. It’s what happens when you decide to use the wall. To make it usable, Docker mounts a chalkboard on top of the permanent wall.This chalkboard is a writable layer where all your changes, new files, and running processes happen. Every container gets its own separate chalkboard, so what you do on one doesn\u0026rsquo;t affect another, even if they are mounted on the same wall. The wall itself is never copied; containers simply reference the existing wall, making them fast and efficient to create.\nDockerfile: The Blueprint for the Wall # A Dockerfile is the builder\u0026rsquo;s blueprint. It’s a simple text file with step-by-step instructions on how to build a wall. Each instruction, like installing software or copying application code, tells the builder to add another permanent, read-only block (a layer) to the stack.\nCustom Images: Reinforcing the Wall # Often, you don\u0026rsquo;t build a wall from the ground up. Instead, you create a Custom Image. This involves taking an existing wall (like the official Ubuntu image) and giving the builder a blueprint that adds new, custom blocks on top. For example, you might add a block containing your own application\u0026rsquo;s code. This is like reinforcing the existing wall or adding features to it, not building a completely separate new one.\nThe docker build Command # This is the command you give to the builder. It reads your Dockerfile blueprint, gathers any necessary local files (the \u0026ldquo;build context\u0026rdquo;), and constructs your final wall (your custom image) exactly as you specified.\nThe docker run Command: Putting It All Together # The docker run command is the action that mounts a fresh chalkboard onto a specified wall. This combination—the permanent wall (your image) plus the temporary chalkboard on top (the writable layer)—is what we call a Container.You can write, draw, and erase on the chalkboard all you want without ever leaving a mark on the underlying wall. When you are finished, you can either wipe the chalkboard clean and remove it, or leave it stopped on the wall to inspect later. You can even mount hundreds of separate chalkboards on the very same wall, and each will be a unique, isolated container.\n","date":"20 September 2025","externalUrl":null,"permalink":"/concepts/docker-images-vs-containers/","section":"Concepts","summary":"","title":"A wall and a chalkboard: An Analogy to Understand Docker Images and Containers","type":"concepts"},{"content":"\n","date":"20 September 2025","externalUrl":null,"permalink":"/concepts/","section":"Concepts","summary":"","title":"Concepts","type":"concepts"},{"content":"","date":"20 September 2025","externalUrl":null,"permalink":"/","section":"z-dump","summary":"","title":"z-dump","type":"page"},{"content":" Environment variables # An environment is a collection of dynamic, named values—called environment variables—that can affect the way running processes will behave on a computer.\nEvery single process has its own copy of this environment.\nSome of the most common environment variables include :\nUSER (or LOGNAME): the name of the user currently login. HOME: The absolute path to the USER home directory (e.g., /home/hacker). This is where the shell starts you off and where programs look for user-specific configuration files. PATH: Arguably the most important one. It\u0026rsquo;s a colon-separated list of directories. When you type a command like cat without specifying its full path (/bin/cat), the shell searches through the directories listed in PATH until it finds an executable file with that name. PWD: The path to your Present Working Directory. It changes every time you cd. LANG: Controls the language, character set, and formatting for things like dates and currency. How to View and Work with environment variables # To see all environment variables: 1$ env 2# or 3$ printenv To see the value of a single variable: Use echo and a $ followed by the variable name. Note: There is no space between the $ sign and the variable name 1#echo $VAR_NAME 2$ echo $PATH # Output: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin Inheritance # When a new process is created, it inherits a copy of its parent\u0026rsquo;s environment 1.\nThis is why everything works so seamlessly accross different commands and programs.\nYou log in, and your main shell process (bash) is created with a full environment (USER=john, PATH=..., etc. ). You run the ls command. The shell creates a new child process for ls. This ls process gets a complete copy of the shell\u0026rsquo;s environment variables. The ls program can now look at its own environment to get information if it needs to, without having to ask the parent shell. Using the env Command # So, if every process automatically inherits the environment, why do we need a command called env?\nThe env command has two main purposes:\nTo view the current environment (when run with no arguments). To run a command in a modified environment, without changing your current shell\u0026rsquo;s environment. Running commands in a modified environment\nLet\u0026rsquo;s say your LANG environment variable responsible for your language preference is English, and you want to see the date in French without changing your system language for example.\n1# This will use our default English environment 2 3$ date 4 5# Output: Tue 21 Aug 2025 10:30:00 AM UTC 6 7# This runs \u0026#39;date\u0026#39; in a temporary, modified environment 8 9$ env LANG=fr_FR.UTF-8 date 10 11# Output: mar. 21 août 2025 10:30:00 UTC That is it. Thanks for reading\nI hope you learned something from this post. Any suggestions or areas of improvement? Please let me know, it will help me a lot to write better future posts. Thanks !!\nThis can be abused if the env command has a root setuid bit set. The following youtube playlist from Indronil Banerjee has a good playlist explaining how processes work on a linux Os.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"24 August 2025","externalUrl":null,"permalink":"/concepts/env/","section":"Concepts","summary":"","title":"env the Command Launcher you Never Knew you Had","type":"concepts"},{"content":" At its core, the locale command gives information on how a Linux system and its programs are configured to display information related to language and geographical region1.This is somehow similar to the \u0026ldquo;Language \u0026amp; Region\u0026rdquo; settings panel in Windows or macOS. It\u0026rsquo;s where you set things such as :\nThe display language (English, French, Japanese etc\u0026hellip;). The format for dates and times (MM/DD/YYYY vs. DD.MM.YYYY). The symbol for currency ($ vs. €). The character used as a decimal point (. vs. ,). How text should be sorted alphabetically. The locale command is the command-line equivalent of that settings panel. It shows the current values for all these settings in a given terminal session.\nHow to Use It # 1. Running locale without arguments # When you run the locale command with no arguments, it prints a list of environment variables that control these settings. Each variable handles a specific category.\n$ locale Example Output and What It Means:\nLANG=en_US.UTF-8: This is the most important one. It\u0026rsquo;s the default language and region for all categories unless a more specific variable is set. This means US English using the UTF-8 character set. LC_CTYPE=\u0026quot;en_US.UTF-8\u0026quot;: Controls character classification. (What is a letter? What is a number? How are they sorted?) LC_NUMERIC=\u0026quot;en_US.UTF-8\u0026quot;: Controls number formatting. (e.g., 1,000.00) LC_TIME=\u0026quot;en_US.UTF-8\u0026quot;: Controls date and time formatting. (e.g., Tuesday, August 21, 2025) LC_COLLATE=\u0026quot;en_US.UTF-8\u0026quot;: Controls the alphabetical sorting order of strings. LC_MONETARY=\u0026quot;en_US.UTF-8\u0026quot;: Controls currency formatting. (e.g., $1,234.56) LC_MESSAGES=\u0026quot;en_US.UTF-8\u0026quot;: Controls the language of system messages and program menus. LC_ALL=: This one is special. If it\u0026rsquo;s set, it acts as a master override and forces all categories to use its value, ignoring LANG and all other LC_* variables. It\u0026rsquo;s usually empty by default. 2. Listing All Available Locales: locale -a # It\u0026rsquo;s used to list all the \u0026ldquo;language packs\u0026rdquo; or locale definitions that are installed on the system.\n$ locale -a A program can only switch to a locale if that locale\u0026rsquo;s name appears in the output of locale -a.\nManaging Locales # Locales, are often not pre-installed to save space. The process involves generating the locale files from a master list. This is a system administration task and requires sudo.\nVerify Installed Locales # Using the locale -a command we can verify if the locale (language) we want to use hasn\u0026rsquo;t been installed (compile) already.\n$ locale -a This command reads the compiled locale files from the system. If it\u0026rsquo;s not in this list, the system can\u0026rsquo;t use it.\nInstalling New Locales (Requires sudo2) # This is a three-step process: edit, generate, and update. Note: Each of these steps requires root privileges. So you will need sudo to perform each step. Step 1: Edit the Master List The list of all possible locales your system knows about is in the file /etc/locale.gen.\n$ sudo nano /etc/locale.gen Inside, you will see hundreds of lines, most of them commented out with a #. Below is short output of the /etc/locale.gen file\n# ... #es_US.UTF-8 UTF-8 #eu_ES.UTF-8 UTF-8 #fa_IR UTF-8 #fi_FI.UTF-8 UTF-8 #fr_BE.UTF-8 UTF-8 #fr_CA.UTF-8 UTF-8 #fr_CH.UTF-8 UTF-8 #fr_FR.UTF-8 UTF-8 #fr_LU.UTF-8 UTF-8 # ... Step 2: Uncomment the Locales You Want Find the line for the locale you want to install (e.g., fr_FR.UTF-8 UTF-8) and remove the # at the beginning of the line. You can uncomment multiple locales if you wish. Save and close the file.\nStep 3: Generate the Locales (update) Now, run the locale-gen command. This command reads /etc/locale.gen, sees the lines you\u0026rsquo;ve uncommented, and compiles the necessary binary locale files from the system\u0026rsquo;s source data.\n$ sudo locale-gen You will see output as it generates the new files: Generating locales (this might take a while)... fr_FR.UTF-8... done Generation complete. Verify the Installation Run the verification command again. Your newly generated locale should now appear in the list.\n$ locale -a You can further test this using the env3 command as follow\n$ env LANG=fr_FR.UTF-8 date # replace the *value* of `LANG` with the value of the \u0026#34;language pack\u0026#34; you just compiled. Thanks for reading. Until then\nLanguage and geographical region informations refer to any output that is language dependent it won\u0026rsquo;t change output messages for commands that are not region dependent.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nNot so sure what sudo is ?? check my post on sudo\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nA post on env\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"24 August 2025","externalUrl":null,"permalink":"/concepts/locale/","section":"Concepts","summary":"","title":"Linux locale command","type":"concepts"},{"content":" New article ! I Was Wrong About sudo. Let\u0026rsquo;s Talk about SetUID # I thought I had a decent handle on Linux permissions users, groups, the classic rwx bits. Then I came across the pwn.college program misuse module. While working on a privilege escalation problem, something worked that just shouldn\u0026rsquo;t have, based on the mental model I was using at the time. It forced me to see that my whole idea of sudo was wrong. I always saw sudo as some magic keyword built into the OS. Well turns out it\u0026rsquo;s not. The real power is a much simpler, older concept called SetUID.SetUID is basically all you need to understand how this stuff really works.\nTL;DR # sudo is just a program that uses setuid: It isn\u0026rsquo;t a magic OS keyword. It\u0026rsquo;s a normal program owned by root that has the setuid permission bit. It uses its own setuid-given power to run your commands as root.\nsetuid is automatic privilege elevation: The setuid bit (the s in ls -l) on any program simply means: \u0026ldquo;Run this as the file\u0026rsquo;s owner, not the person who executed it.\u0026rdquo; No sudo command needed. If root owns the file, the program runs as root.\nYour \u0026ldquo;Effective\u0026rdquo; ID changes, not your \u0026ldquo;Real\u0026rdquo; one: The kernel tracks who you really are (Real UID) versus what you can currently do (Effective UID). setuid only changes your Effective UID for that one process, and that\u0026rsquo;s the ID the OS checks for file permissions.\nThis power is persistent (and dangerous): The elevated privilege lasts for the entire time the program is running. It doesn\u0026rsquo;t just turn off automatically, which is why poorly written setuid programs can be a huge security risk.\nNote : For security, most Linux systems mount temporary directories like /tmp with the nosuid mount option. This rule tells the kernel to completely ignore the SetUID bit for any program on that entire filesystem. It\u0026rsquo;s a security control to stop an attacker from running SetUID from this location. You can check this yourself by running mount | grep /tmp.\nBack to the Basics: How do processes normally get Permissions # On Linux, everything is about access control. The OS checks user and group IDs (UID and GID) to decide who can do what. When a program runs, it\u0026rsquo;s just a set of instructions spawning various processes, and that process needs permissions to do its job (like read a file or open a network connection).\nHere\u0026rsquo;s the normal rule: Every process inherits the user and group ID of the parent process that spawned it. When, user john, runs a command, it runs with john\u0026rsquo;s UID and GID.\nPrivilege Escalation is a FEATURE not a de facto vulnerability as I was thinking # This is where my first big \u0026ldquo;aha!\u0026rdquo; moment happened. Privilege Escalation (PE) isn\u0026rsquo;t inherently a vulnerability. At its core, it\u0026rsquo;s a mechanism that allows a user to perform actions that only a different user has the permissions for. It only becomes a vulnerability when it is misconfigured.\nOn Linux, this mechanism is primarily implemented through two tools we often see: SetUID and sudo. And as you will soon learn, the latter is completely dependent on the former.\nSetUID # SetUID (Set User ID) is a special permission bit. It has an octal value of 4 and is represented by an s in the file owner\u0026rsquo;s permission block (-rwsr-xr-x).\nIts function is simple but powerful: it allows anyone with execute permissions on the file to run that program with the power(permissions) of the file\u0026rsquo;s owner.\nHere’s how the process works step-by-step:\nA user starts a program that has the SetUID bit set. When the Linux kernel sees the s bit, it breaks the normal inheritance rule. Instead of using the user\u0026rsquo;s ID, the kernel sets the process\u0026rsquo;s effective user ID (euid) to the ID of the user who owns the file. If not explicitly changed in the code, the program continues to run with the owner\u0026rsquo;s privileges until it terminates. So, What Is sudo Then ? # sudo is not a magic do everything command it is just a normal C program located at /usr/bin/sudo that is owned by root and has the SetUID bit set.\nIts behavior is an exact, but much more secure, implementation of the SetUID mechanism. Here is what really happens when you type sudo apt update:\nYou execute /usr/bin/sudo, which starts up with an effective user ID of root because of the SetUID bit. But sudo doesn\u0026rsquo;t just run your command. It\u0026rsquo;s a security mechanism put in place to control and keep track of command running with high privilegies. First, it uses its root power to read the /etc/sudoers file—a file only root can read. It checks if you, the real user, is listed in that file and have permission to run apt update. If the rules match, it may ask for your password to verify your identity. Only if all these checks pass does sudo then spawn a child process to run apt update, which now inherits the root context from its parent, sudo. DIY # Not being a system programmer I asked gemini for a modified version of the cat command that prints the ruid,euid,gid and egid of the person runing the program along with the content of the file.\nCopy the code below into a file, for example: simplecat.c 1```c 2#include \u0026lt;stdio.h\u0026gt; 3#include \u0026lt;stdlib.h\u0026gt; 4#include \u0026lt;string.h\u0026gt; 5#include \u0026lt;sys/types.h\u0026gt; 6#include \u0026lt;unistd.h\u0026gt; // For getuid() and geteuid() 7 8int main(int argc, char *argv[]) { 9 FILE *fp; 10 char buffer[1024]; 11 12 // Print Real and Effective UIDs to observe the change 13 printf(\u0026#34;Real UID: %d\\n\u0026#34;, getuid()); 14 printf(\u0026#34;Effective UID: %d\\n\u0026#34;, geteuid()); 15 printf(\u0026#34;Real GID: %d\\n\u0026#34;, getgid()); 16 printf(\u0026#34;Effective GID: %d\\n\u0026#34;, getegid()); 17 18 if (argc \u0026lt; 2) { 19 fprintf(stderr, \u0026#34;Usage: %s \u0026lt;filename\u0026gt;\\n\u0026#34;, argv[0]); 20 return 1; 21 } 22 23 fp = fopen(argv[1], \u0026#34;r\u0026#34;); 24 if (fp == NULL) { 25 perror(\u0026#34;Error opening file\u0026#34;); 26 return 1; 27 } 28 29 while (fgets(buffer, sizeof(buffer), fp) != NULL) { 30 printf(\u0026#34;%s\u0026#34;, buffer); 31 } 32 33 fclose(fp); 34 return 0; 35} 36``` compile the program\ngcc simplecat.c -o mycat\nYou can try this by compiling two versions of this program and set the setuid bit for one and the other one without the setuid bit. The latter will be run using sudo to access. Create two distinct users with different permissions and try to access a file based on the permissions you have set, and note the behaviour when using either the sudo mycat command or the permission from the setuid bit\nNote : For security, most Linux distributions mount temporary directories like /tmp with the nosuid mount option. This rule tells the kernel to completely ignore the SetUID bit for any program on that entire filesystem. It\u0026rsquo;s a security control to stop an attacker from running SetUID from this location. You can check this yourself by running mount | grep /tmp.\nThat is it. Thanks for reading\nI hope you learned something from this post. Any suggestions or areas of improvement? Please let me know, it will help me a lot to write better future posts. Thanks !!\nLinux File Permissions sudo getuid suid ","date":"29 July 2025","externalUrl":null,"permalink":"/concepts/sudo-vs-setuid/","section":"Concepts","summary":"","title":"I Was So Wrong About Sudo","type":"concepts"},{"content":"\u0026ldquo;Hi there, I’m Ngatchou. You could say I’m an Information Technology enthusiast, but really, I\u0026rsquo;m just incredibly curious about how things work.\nMy journey into IT started with a professional degree in Networking \u0026amp; Telecommunication. But my real education began once I got my hands on the hardware. Dealing with computers and network devices made me intensely curious. I didn\u0026rsquo;t just want to know how they worked; I wanted to know how to make them behave in unintended ways and, most importantly, how to secure them. That feeling—especially the challenge of outsmarting the technology—was a clear sign. I realized my place wasn\u0026rsquo;t just in telecommunication, but in cybersecurity. So, I decided to switch paths and am now studying cybersecurity at the Uba.\nAs I dove into cybersecurity, I quickly learned that so much of the digital world is built on Linux. That\u0026rsquo;s what sparked my interest in its ecosystem. I went on to earn the Linux Foundation IT Associate certification, and now I\u0026rsquo;m on the path to becoming a Linux System Administrator by preparing for the LFCS. Of course, theory is one thing, but practice is everything. I sharpen my cybersecurity skills by actively participating in CTFs and on platforms like Hack The Box and pwn.college.\nCybersecurity can be intense, so I find it\u0026rsquo;s important to have other interests to stay balanced. When I’m not in front of a screen, you\u0026rsquo;ll probably find me reading, writing down random thoughts, listening to music (especially old-timers), or watching a good documentary. Lately, my curiosity has also pulled me toward the rise of generative AI, and I\u0026rsquo;m exploring how LLMs and Machine Learning can be integrated with cybersecurity.\nBut my interests aren\u0026rsquo;t just digital. I\u0026rsquo;m also involved in car security. It\u0026rsquo;s a completely different kind of challenge, but I get a lot of satisfaction from helping people regain access to their vehicles by programming new keys.\nSo, that\u0026rsquo;s me in a nutshell. A cybersecurity student, a Linux enthusiast, and a lifelong learner. Thanks for stopping by to read my story.\u0026rdquo;\n","externalUrl":null,"permalink":"/about/","section":"z-dump","summary":"","title":"About Me","type":"page"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":" ","externalUrl":null,"permalink":"/projects/","section":"Projects","summary":"","title":"Projects","type":"projects"},{"content":"\nEducation # \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Professional Master in Cybersecurity Estimated August 2026 University of Bamenda - Uba \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Licence en Ingenierie des Telecommunication et Reseaux Mobiles 2024 Universite de Ngaoundere Institut Universitaire des Science et Technologie de Yaounde - IUSTY \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Diplome de qualification professionnel en maintenance des Reseaux des system informatique 2023 Minstere de la Formation Professionnel - MINEFOP CITIS - POWERBACHE \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Brevet de Technicien Superieure en Reseaux et Telecommunication 2021 Ministere de l\u0026#39;enseignement superieure du Cameroun- MINESUP ISTAG Certifications # \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Linux Foundation IT Associate 2022 Linux Foundation \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Fundamentals of Open Source IT and Cloud Computing LFS200 2022 Linux Foundation \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r\u003c!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"\u003e\rCertified Cloud Security Professional 2024 Simplilearn Prompt Engineering for Everyone 2024 CodeSignal Training # Developement web - Niveau Debutant 2025 D-clic Online Aspiring Certified Junior Cybersecurity Associate - CJCA Fulltime HackTheBox - HTB Online \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Cybersecurity Training Fulltime PwnCollege Online Languages # French - English French - Primary Language\nEnglish - Secondary Language ","externalUrl":null,"permalink":"/resume/","section":"z-dump","summary":"","title":"Resume","type":"page"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"}]